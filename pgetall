#!/bin/bash
# psavall <list> <msg> # save every prj in list (add/commit/push)

list=$1
msg=$2

. lib-prj
home=$(home) 			# echo home: $home
host=$(host) 			# echo host: $host
[[ "$list" == "." ]] && list="" # trik to save default
[[ "$list" == "" ]] && list=$(get_repos)
# echo list: $list  		# get default repos list

for prj in $(cat $home/.cfg/$host/$list.list | tr -d '\r'); do 
	path=`sed -E -n 's/^path=([^#]+).*/\1/p' $home/.cfg/$host/$prj | tr -d '\r'` # sed -E -n 's/^path=([^#]+)/\1/p' /Users/a.bysov/prj/utils-vcs/.cfg/ok/ue
	(
	eval cd "$path"

	echo -e "\n${grey_back}$prj: $path${norm}"
	changes=$(gis | wc -l) #; echo "changes: -$changes-" 2> /dev/null 
	need_to_pull=no
	if [ $changes -eq 0  -o  "$changes" == "" ]; then

		LOCAL=$(git rev-parse @)
		REMOTE=$(git ls-remote 2>/dev/null | awk "/HEAD/ {print \$1}") # on remote site
		BASE=$(git merge-base @ @{u}) #echo LOCAL:$LOCAL REMOTE:$REMOTE BASE:$BASE
		if [ $LOCAL = $REMOTE ]; then
			true # echo "Up-to-date"
		  elif [ $LOCAL = $BASE ]; then
			need_to_pull=yes
		  elif [ $REMOTE = $BASE ]; then
			echo -e "${yellow}NEED TO PUSH !${norm}" 
		  else
			echo -e "${red_bright}DIVERGED ! NEED TO PUSH AFTER ${norm}" #
			need_to_pull=yes
		  fi
		[ "$need_to_pull" == "yes" ] && gul "$msg" # TODO: переделать на использование либы 
	  else
		echo -e "${yellow}NEED TO COMMIT${norm}" 
	  	gis
	  fi
	)
  done

# TODO: test uncommited (untracked, changed, deleted, staged)



